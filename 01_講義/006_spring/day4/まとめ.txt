■JPAとは
データベース操作を行うためのAPI(アプリケーションインターフェイス)。
ORM(オブジェクト関係マッピング)の機能を提供している。
JPAを利用することで、
SQL文を書かなくても、DBのCRUD処理を行うことが出来る！

★Entity
関連したテーブルの1レコードを保管するためのオブジェクト。
①@Entityを付与し、@Table(name="tablename")で
テーブルと関連付ける。
②テーブルの列名と同名(スネークケース→キャメルケース）の
フィールドと　命名規則に従ったgetter/setterを持つ。
・主キー列に対応したフィールドには、@Idを付与する。
・その他の列に対応したフィールドには@Columnを付与する。

★リポジトリ
テーブルへのCRUD処理を実行するために使用するインターフェイス。
※DBへの接続はJDBCが行う。
・JpaRepositoryを継承し作成する。
・JpaRepositoryのジェネリクス定義。
1つ目に、Entityの型、
2つ目に、主キーに対応したフィールドの型を定義する。
ex)extends JpaRepository<Entity,Integer>

★Controllerでの使用例：
---------------------------------------------------------------
model.addAttribute("items", repository.findAll());
---------------------------------------------------------------
①repository.findAll()：全件検索
・JpaRepositoryで定義済のfindAllメソッドの実行。
・repositoryで指定したEntityに関連付けられた
テーブルの全件取得。
・1件毎のデータを、repositoryで指定した
Entityオブジェクトに格納。
・それらオブジェクトをまとめたListを取得。

②変数名(キー)itemsで、①で取得したListをリクエストスコープに保存。

---------------------------------------------------------------
ItemEntity item = repository.getReferenceById(1);
---------------------------------------------------------------
■repository.getReferenceById(1)：主キー検索
・JpaRepositoryで定義済のgetReferenceByIdメソッドの実行。
・メソッドの引数で指定した主キーのレコードを1件取得。
・取得したデータをItemEntityオブジェクトに格納し取得。

---------------------------------------------------------------
ItemEntity item = new ItemEntity(1,"みかん");
repository.save(item);
---------------------------------------------------------------
■repository.save(item)：レコードの登録・更新
ItemEntityオブジェクトに格納されたデータを元に、
関連したテーブルにレコードの挿入または更新が実行される。
↓主キーフィールドに設定された値のレコードが存在しない場合
レコードの登録
↓主キーフィールドに設定された値のレコードが存在する場合
該当レコードを更新








